//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: protos/library.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///CRUD Operations
///
/// Usage: instantiate `Library_LibraryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Library_LibraryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? { get }

  func createBook(
    _ request: Library_CreateBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Library_CreateBookRequest, Library_CreateBookRequest>

  func getBook(
    _ request: Library_GetBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Library_GetBookRequest, Library_Book>

  func updateBook(
    _ request: Library_UpdateBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Library_UpdateBookRequest, Library_Book>

  func deleteBook(
    _ request: Library_DeleteBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Library_DeleteBookRequest, Library_DeleteResponse>

  func listBooks(
    _ request: Library_ListBooksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Library_ListBooksRequest, Library_ListBooksResponse>
}

extension Library_LibraryServiceClientProtocol {
  internal var serviceName: String {
    return "library.LibraryService"
  }

  ///Create a new Book
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBook(
    _ request: Library_CreateBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Library_CreateBookRequest, Library_CreateBookRequest> {
    return self.makeUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.createBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBookInterceptors() ?? []
    )
  }

  ///Fetching Book with id
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBook(
    _ request: Library_GetBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Library_GetBookRequest, Library_Book> {
    return self.makeUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.getBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBookInterceptors() ?? []
    )
  }

  ///Update Book
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBook(
    _ request: Library_UpdateBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Library_UpdateBookRequest, Library_Book> {
    return self.makeUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.updateBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBookInterceptors() ?? []
    )
  }

  ///Delete a Book with id
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBook(
    _ request: Library_DeleteBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Library_DeleteBookRequest, Library_DeleteResponse> {
    return self.makeUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.deleteBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBookInterceptors() ?? []
    )
  }

  ///List the Books
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBooks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listBooks(
    _ request: Library_ListBooksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Library_ListBooksRequest, Library_ListBooksResponse> {
    return self.makeUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.listBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBooksInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Library_LibraryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Library_LibraryServiceNIOClient")
internal final class Library_LibraryServiceClient: Library_LibraryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the library.LibraryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Library_LibraryServiceNIOClient: Library_LibraryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the library.LibraryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///CRUD Operations
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Library_LibraryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateBookCall(
    _ request: Library_CreateBookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Library_CreateBookRequest, Library_CreateBookRequest>

  func makeGetBookCall(
    _ request: Library_GetBookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Library_GetBookRequest, Library_Book>

  func makeUpdateBookCall(
    _ request: Library_UpdateBookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Library_UpdateBookRequest, Library_Book>

  func makeDeleteBookCall(
    _ request: Library_DeleteBookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Library_DeleteBookRequest, Library_DeleteResponse>

  func makeListBooksCall(
    _ request: Library_ListBooksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Library_ListBooksRequest, Library_ListBooksResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Library_LibraryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Library_LibraryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateBookCall(
    _ request: Library_CreateBookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Library_CreateBookRequest, Library_CreateBookRequest> {
    return self.makeAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.createBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBookInterceptors() ?? []
    )
  }

  internal func makeGetBookCall(
    _ request: Library_GetBookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Library_GetBookRequest, Library_Book> {
    return self.makeAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.getBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBookInterceptors() ?? []
    )
  }

  internal func makeUpdateBookCall(
    _ request: Library_UpdateBookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Library_UpdateBookRequest, Library_Book> {
    return self.makeAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.updateBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBookInterceptors() ?? []
    )
  }

  internal func makeDeleteBookCall(
    _ request: Library_DeleteBookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Library_DeleteBookRequest, Library_DeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.deleteBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBookInterceptors() ?? []
    )
  }

  internal func makeListBooksCall(
    _ request: Library_ListBooksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Library_ListBooksRequest, Library_ListBooksResponse> {
    return self.makeAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.listBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBooksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Library_LibraryServiceAsyncClientProtocol {
  internal func createBook(
    _ request: Library_CreateBookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Library_CreateBookRequest {
    return try await self.performAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.createBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBookInterceptors() ?? []
    )
  }

  internal func getBook(
    _ request: Library_GetBookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Library_Book {
    return try await self.performAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.getBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBookInterceptors() ?? []
    )
  }

  internal func updateBook(
    _ request: Library_UpdateBookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Library_Book {
    return try await self.performAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.updateBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBookInterceptors() ?? []
    )
  }

  internal func deleteBook(
    _ request: Library_DeleteBookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Library_DeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.deleteBook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBookInterceptors() ?? []
    )
  }

  internal func listBooks(
    _ request: Library_ListBooksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Library_ListBooksResponse {
    return try await self.performAsyncUnaryCall(
      path: Library_LibraryServiceClientMetadata.Methods.listBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBooksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Library_LibraryServiceAsyncClient: Library_LibraryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Library_LibraryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Library_LibraryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createBook'.
  func makeCreateBookInterceptors() -> [ClientInterceptor<Library_CreateBookRequest, Library_CreateBookRequest>]

  /// - Returns: Interceptors to use when invoking 'getBook'.
  func makeGetBookInterceptors() -> [ClientInterceptor<Library_GetBookRequest, Library_Book>]

  /// - Returns: Interceptors to use when invoking 'updateBook'.
  func makeUpdateBookInterceptors() -> [ClientInterceptor<Library_UpdateBookRequest, Library_Book>]

  /// - Returns: Interceptors to use when invoking 'deleteBook'.
  func makeDeleteBookInterceptors() -> [ClientInterceptor<Library_DeleteBookRequest, Library_DeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'listBooks'.
  func makeListBooksInterceptors() -> [ClientInterceptor<Library_ListBooksRequest, Library_ListBooksResponse>]
}

internal enum Library_LibraryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LibraryService",
    fullName: "library.LibraryService",
    methods: [
      Library_LibraryServiceClientMetadata.Methods.createBook,
      Library_LibraryServiceClientMetadata.Methods.getBook,
      Library_LibraryServiceClientMetadata.Methods.updateBook,
      Library_LibraryServiceClientMetadata.Methods.deleteBook,
      Library_LibraryServiceClientMetadata.Methods.listBooks,
    ]
  )

  internal enum Methods {
    internal static let createBook = GRPCMethodDescriptor(
      name: "CreateBook",
      path: "/library.LibraryService/CreateBook",
      type: GRPCCallType.unary
    )

    internal static let getBook = GRPCMethodDescriptor(
      name: "GetBook",
      path: "/library.LibraryService/GetBook",
      type: GRPCCallType.unary
    )

    internal static let updateBook = GRPCMethodDescriptor(
      name: "UpdateBook",
      path: "/library.LibraryService/UpdateBook",
      type: GRPCCallType.unary
    )

    internal static let deleteBook = GRPCMethodDescriptor(
      name: "DeleteBook",
      path: "/library.LibraryService/DeleteBook",
      type: GRPCCallType.unary
    )

    internal static let listBooks = GRPCMethodDescriptor(
      name: "ListBooks",
      path: "/library.LibraryService/ListBooks",
      type: GRPCCallType.unary
    )
  }
}

///CRUD Operations
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Library_LibraryServiceProvider: CallHandlerProvider {
  var interceptors: Library_LibraryServiceServerInterceptorFactoryProtocol? { get }

  ///Create a new Book
  func createBook(request: Library_CreateBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Library_CreateBookRequest>

  ///Fetching Book with id
  func getBook(request: Library_GetBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Library_Book>

  ///Update Book
  func updateBook(request: Library_UpdateBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Library_Book>

  ///Delete a Book with id
  func deleteBook(request: Library_DeleteBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Library_DeleteResponse>

  ///List the Books
  func listBooks(request: Library_ListBooksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Library_ListBooksResponse>
}

extension Library_LibraryServiceProvider {
  internal var serviceName: Substring {
    return Library_LibraryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_CreateBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_CreateBookRequest>(),
        interceptors: self.interceptors?.makeCreateBookInterceptors() ?? [],
        userFunction: self.createBook(request:context:)
      )

    case "GetBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_GetBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_Book>(),
        interceptors: self.interceptors?.makeGetBookInterceptors() ?? [],
        userFunction: self.getBook(request:context:)
      )

    case "UpdateBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_UpdateBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_Book>(),
        interceptors: self.interceptors?.makeUpdateBookInterceptors() ?? [],
        userFunction: self.updateBook(request:context:)
      )

    case "DeleteBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_DeleteBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_DeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteBookInterceptors() ?? [],
        userFunction: self.deleteBook(request:context:)
      )

    case "ListBooks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_ListBooksRequest>(),
        responseSerializer: ProtobufSerializer<Library_ListBooksResponse>(),
        interceptors: self.interceptors?.makeListBooksInterceptors() ?? [],
        userFunction: self.listBooks(request:context:)
      )

    default:
      return nil
    }
  }
}

///CRUD Operations
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Library_LibraryServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Library_LibraryServiceServerInterceptorFactoryProtocol? { get }

  ///Create a new Book
  func createBook(
    request: Library_CreateBookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Library_CreateBookRequest

  ///Fetching Book with id
  func getBook(
    request: Library_GetBookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Library_Book

  ///Update Book
  func updateBook(
    request: Library_UpdateBookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Library_Book

  ///Delete a Book with id
  func deleteBook(
    request: Library_DeleteBookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Library_DeleteResponse

  ///List the Books
  func listBooks(
    request: Library_ListBooksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Library_ListBooksResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Library_LibraryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Library_LibraryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Library_LibraryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Library_LibraryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_CreateBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_CreateBookRequest>(),
        interceptors: self.interceptors?.makeCreateBookInterceptors() ?? [],
        wrapping: { try await self.createBook(request: $0, context: $1) }
      )

    case "GetBook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_GetBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_Book>(),
        interceptors: self.interceptors?.makeGetBookInterceptors() ?? [],
        wrapping: { try await self.getBook(request: $0, context: $1) }
      )

    case "UpdateBook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_UpdateBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_Book>(),
        interceptors: self.interceptors?.makeUpdateBookInterceptors() ?? [],
        wrapping: { try await self.updateBook(request: $0, context: $1) }
      )

    case "DeleteBook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_DeleteBookRequest>(),
        responseSerializer: ProtobufSerializer<Library_DeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteBookInterceptors() ?? [],
        wrapping: { try await self.deleteBook(request: $0, context: $1) }
      )

    case "ListBooks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Library_ListBooksRequest>(),
        responseSerializer: ProtobufSerializer<Library_ListBooksResponse>(),
        interceptors: self.interceptors?.makeListBooksInterceptors() ?? [],
        wrapping: { try await self.listBooks(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Library_LibraryServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBookInterceptors() -> [ServerInterceptor<Library_CreateBookRequest, Library_CreateBookRequest>]

  /// - Returns: Interceptors to use when handling 'getBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBookInterceptors() -> [ServerInterceptor<Library_GetBookRequest, Library_Book>]

  /// - Returns: Interceptors to use when handling 'updateBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBookInterceptors() -> [ServerInterceptor<Library_UpdateBookRequest, Library_Book>]

  /// - Returns: Interceptors to use when handling 'deleteBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteBookInterceptors() -> [ServerInterceptor<Library_DeleteBookRequest, Library_DeleteResponse>]

  /// - Returns: Interceptors to use when handling 'listBooks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListBooksInterceptors() -> [ServerInterceptor<Library_ListBooksRequest, Library_ListBooksResponse>]
}

internal enum Library_LibraryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LibraryService",
    fullName: "library.LibraryService",
    methods: [
      Library_LibraryServiceServerMetadata.Methods.createBook,
      Library_LibraryServiceServerMetadata.Methods.getBook,
      Library_LibraryServiceServerMetadata.Methods.updateBook,
      Library_LibraryServiceServerMetadata.Methods.deleteBook,
      Library_LibraryServiceServerMetadata.Methods.listBooks,
    ]
  )

  internal enum Methods {
    internal static let createBook = GRPCMethodDescriptor(
      name: "CreateBook",
      path: "/library.LibraryService/CreateBook",
      type: GRPCCallType.unary
    )

    internal static let getBook = GRPCMethodDescriptor(
      name: "GetBook",
      path: "/library.LibraryService/GetBook",
      type: GRPCCallType.unary
    )

    internal static let updateBook = GRPCMethodDescriptor(
      name: "UpdateBook",
      path: "/library.LibraryService/UpdateBook",
      type: GRPCCallType.unary
    )

    internal static let deleteBook = GRPCMethodDescriptor(
      name: "DeleteBook",
      path: "/library.LibraryService/DeleteBook",
      type: GRPCCallType.unary
    )

    internal static let listBooks = GRPCMethodDescriptor(
      name: "ListBooks",
      path: "/library.LibraryService/ListBooks",
      type: GRPCCallType.unary
    )
  }
}
